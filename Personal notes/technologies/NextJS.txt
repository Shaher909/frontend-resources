Next.js is a free and open source react-based framework which supports static and server-rendered pages which help to build dynamic and hybrid applications. While stand-alone react app are client-side rendered.
It builds on top of React.js to provide additional services, features and tools (bundling, compiling, fetching data, routing and TypeScript ..etc.)

Features:
- Data Fetching: next.js allows us to fetch data and render HTML on the server which allow quicker loading time & bots to crawl this content.

It can run:
#1 Server-side rendering which entails dynamic generation where the server renders the React application generating the HTML
#2 Static site generation in which it pre-renders the site by copying files into CDN which increases the speed of the site. This is good in use cases in which content does not change that often.
#3 Static incremental rendering in which statid and dynamic properties are comgined allowing generation of static content but at the time providing possiblity to updaing certain elements before the generation.
#4 Client side rendering which is good pages with heavy data load (CSR) (not optimal for SEO)

It supports:
#1 Using TypeScript
#2 File-based router supporting layouts, nested routing and error handling
#3 Styling via CSS modules, tailwind or CSS-in-JS
#4 Data Fetching through async/await in server components.
#5 Optimizations for images, fonts and scripts.


Setup:
NextJS comes with a default setup that allows a quick start, with directories for specific purposes and automatic routing.

Routing:
- Using React Router and client side routing via the link component.

Project file structure:

Pages --> _app.js : represents the entry point to the APP (starting point). 
Pages --> api: this is a directory to setup routes that only apply to the server. (this will not be included into the bundle send to the client side).